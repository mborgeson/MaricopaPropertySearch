#!/usr/bin/env python3
"""
Automated Checkpoint Generation System
Generates timestamped project status checkpoints automatically
"""

import os
import sys
import json
import subprocess
from datetime import datetime
from pathlib import Path

class CheckpointGenerator:
    def __init__(self):
        self.project_root = Path("/home/mattb/MaricopaPropertySearch")
        self.checkpoint_dir = self.project_root / "checkpoints"
        self.checkpoint_dir.mkdir(exist_ok=True)

    def get_git_info(self):
        """Get current git status and recent commits"""
        try:
            # Get current commit hash
            current_commit = subprocess.check_output(
                ["git", "rev-parse", "HEAD"],
                cwd=self.project_root
            ).decode().strip()[:7]

            # Get recent commits
            recent_commits = subprocess.check_output(
                ["git", "log", "--oneline", "-5"],
                cwd=self.project_root
            ).decode().strip()

            # Get changed files count
            status = subprocess.check_output(
                ["git", "status", "--porcelain"],
                cwd=self.project_root
            ).decode().strip()
            changed_files = len(status.split('\n')) if status else 0

            return {
                "current_commit": current_commit,
                "recent_commits": recent_commits,
                "changed_files": changed_files
            }
        except:
            return {
                "current_commit": "unknown",
                "recent_commits": "Git info unavailable",
                "changed_files": 0
            }

    def analyze_codebase(self):
        """Analyze codebase for large files needing refactoring"""
        large_files = []
        try:
            result = subprocess.check_output(
                ["find", ".", "-name", "*.py", "-exec", "wc", "-l", "{}", "+"],
                cwd=self.project_root
            ).decode().strip().split('\n')

            for line in result[:-1]:  # Skip the total line
                parts = line.strip().split()
                if len(parts) == 2:
                    lines, filepath = parts
                    if int(lines) > 500:
                        large_files.append(f"{filepath}: {lines} lines")
        except:
            pass

        return large_files[:10]  # Top 10 largest files

    def get_todo_items(self):
        """Extract TODO items from the previous checkpoint"""
        try:
            # Get latest checkpoint
            checkpoints = sorted(self.checkpoint_dir.glob("MCA_GUI_AUDIT_CHECKPOINT_*.md"))
            if not checkpoints:
                return self.get_default_todos()

            with open(checkpoints[-1], 'r') as f:
                content = f.read()

            # Extract Next Steps section
            if "## Next Steps Checklist" in content:
                todo_section = content.split("## Next Steps Checklist")[1]
                todo_section = todo_section.split("##")[0]  # Get only this section
                return todo_section.strip()
        except:
            pass

        return self.get_default_todos()

    def get_default_todos(self):
        """Default TODO items based on known issues"""
        return """
### ðŸ”´ IMMEDIATE (Security Critical)
- [ ] Change admin password from default: `hmCrRhhsgERD0kq_`

### ðŸŸ¡ SHORT-TERM (Code Quality)
- [ ] Refactor `market_analysis.py` (2,029 lines)
- [ ] Continue modularizing `app.py`

### ðŸŸ¢ PRODUCTION (Deployment)
- [ ] Update deployment documentation for PostgreSQL-only architecture
- [ ] Verify production authentication performance"""

    def generate_checkpoint(self, trigger_type="manual"):
        """Generate a new checkpoint document"""
        timestamp = datetime.now()
        date_str = timestamp.strftime("%Y-%m-%d")
        time_str = timestamp.strftime("%H%M")

        filename = f"MCA_GUI_AUDIT_CHECKPOINT_{date_str}_{time_str}.md"
        filepath = self.checkpoint_dir / filename

        git_info = self.get_git_info()
        large_files = self.analyze_codebase()
        todo_items = self.get_todo_items()

        checkpoint_content = f"""# Maricopa Property Search GUI - Audit Checkpoint


**Date:** {timestamp.strftime("%B %d, %Y @ %H:%M PST")}
**Trigger:** {trigger_type}
**Current Commit:** {git_info['current_commit']}
**Changed Files:** {git_info['changed_files']}

## Recent Git Activity
 [TBD]\n\n"
    f"---\n\n"
    f"**Checkpoint Created:** {timestamp.strftime('%B %d, %Y @ %H:%M PST')}\n"
    f"**Auto-Generated By:** CheckpointGenerator v1.0\n"
    f"**Project Path:** {self.project_root}\n"
    f"**Checkpoint Path:** checkpoints/{filename}\n"
)

```
{git_info['recent_commits']}
```

## Next Steps Checklist

{todo_items}

## Large Files Requiring Refactoring

{chr(10).join(large_files) if large_files else "No files over 500 lines found"}

## Session Resume Instructions

To continue work from this checkpoint:

1. **Load this context:**
   ```
   "Please review checkpoints/{filename} and continue from this checkpoint"
   ```

2. **Check latest changes:**
   ```bash
   git status
   git log --oneline -5
   ```

## Claude-Flow SPARC Agent Swarm Configuration

# Task Overview
Execute comprehensive project improvements including performance optimization, code refactoring, functionality enhancements, and production deployment preparation for the Maricopa Property Search GUI.

## Objective
Complete all goals in the "Issue Resolution Goals" Checklist with priority on codebase performance and accuracy, code quality (refactoring large files), and production readiness (PostgreSQL documentation).

## Context
- Current codebase located at {self.project_root}

## Steps to Complete
- [TBD]
- [TBD]
- [TBD]
- [TBD]

## Input Materials
- [TBD]
- [TBD]
- [TBD]
- [TBD]

## Expected Output Format
- Refactored code modules following established patterns
- Updated checkpoint document with progress
- Git commits with descriptive messages
- Test results showing maintained functionality

## Success Criteria
- [ ] All tests passing
- [ ] Zero regression in functionality
- [TBD]
- [TBD]
- [TBD]
- [TBD]

## Additional Guidelines
- Maintain backward compatibility
- Follow 5-phase refactoring workflow
- Use 10-12-agent orchestration pattern
- Commit after each major milestone
- Update checkpoint after significant progress

## Questions to Address
- [TBD]
- [TBD]
- [TBD]
- [TBD]

---

**Checkpoint Created:** {timestamp.strftime("%B %d, %Y @ %H:%M PST")}
**Auto-Generated By:** CheckpointGenerator v1.0
**Project Path:** {self.project_root}
**Checkpoint Path:** checkpoints/{filename}
"""

        with open(filepath, 'w') as f:
            f.write(checkpoint_content)

        print(f"âœ… Checkpoint created: {filepath}")
        return filepath

if __name__ == "__main__":
    trigger = sys.argv[1] if len(sys.argv) > 1 else "manual"
    generator = CheckpointGenerator()
    generator.generate_checkpoint(trigger)